generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model School {
  id           String    @id @default(cuid())
  name         String
  address      String?
  phone        String?
  email        String?
  website      String?
  logoUrl      String?
  academicYear String
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  branches     Branch[]
  receipts     Receipt[]
  students     Student[]

  @@map("schools")
}

model Branch {
  id        String    @id @default(cuid())
  schoolId  String
  name      String
  address   String?
  phone     String?
  email     String?
  isActive  Boolean   @default(true)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  school    School    @relation(fields: [schoolId], references: [id])
  students  Student[]

  @@map("branches")
}

model AcademicYear {
  id                   String                @id @default(cuid())
  year                 String                @unique
  startDate            DateTime
  endDate              DateTime
  isCurrent            Boolean               @default(false)
  isActive             Boolean               @default(true)
  createdAt            DateTime              @default(now())
  annualFeesStructures AnnualFeesStructure[]
  feeBalances          FeeBalance[]
  feePayments          FeePayment[]
  feeStructures        FeeStructure[]
  otherCharges         OtherCharge[]
  students             Student[]
  terms                Term[]

  @@map("academic_years")
}

model Term {
  id             String       @id @default(cuid())
  academicYearId String
  name           String
  startDate      DateTime
  endDate        DateTime
  isCurrent      Boolean      @default(false)
  createdAt      DateTime     @default(now())
  feeBalances    FeeBalance[]
  feePayments    FeePayment[]
  academicYear   AcademicYear @relation(fields: [academicYearId], references: [id])

  @@unique([academicYearId, name])
  @@map("terms")
}

model Class {
  id                   String                @id @default(cuid())
  name                 String
  level                Int
  capacity             Int                   @default(40)
  isActive             Boolean               @default(true)
  createdAt            DateTime              @default(now())
  annualFeesStructures AnnualFeesStructure[]
  feeStructures        FeeStructure[]
  students             Student[]

  @@map("classes")
}

model Student {
  id              String        @id @default(cuid())
  admissionNumber String        @unique
  firstName       String
  lastName        String
  middleName      String?
  dateOfBirth     DateTime?
  gender          Gender?
  schoolId        String?
  classId         String?
  branchId        String?
  academicYearId  String?
  parentName      String?
  parentPhone     String?
  parentEmail     String?
  address         String?
  enrollmentDate  DateTime      @default(now())
  graduationDate  DateTime?
  status          StudentStatus @default(ACTIVE)
  feesBalanceBf   Float         @default(0)
  feesBalanceCf   Float         @default(0)
  feesBalanceDr   Float         @default(0)
  feesBalanceCr   Float         @default(0)
  feesBalanceDrp  Float         @default(0)
  feesBalanceCrp  Float         @default(0)
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  feeBalances     FeeBalance[]
  feePayments     FeePayment[]
  otherCharges    OtherCharge[]
  academicYear    AcademicYear? @relation(fields: [academicYearId], references: [id])
  branch          Branch?       @relation(fields: [branchId], references: [id])
  class           Class?        @relation(fields: [classId], references: [id])
  school          School?       @relation(fields: [schoolId], references: [id])

  @@map("students")
}

model FeeType {
  id                   String                @id @default(cuid())
  name                 String
  description          String?
  isMandatory          Boolean               @default(true)
  isRecurring          Boolean               @default(true)
  frequency            FeeFrequency          @default(TERM)
  createdAt            DateTime              @default(now())
  annualFeesStructures AnnualFeesStructure[]
  feeBalances          FeeBalance[]
  feeStructures        FeeStructure[]
  paymentDetails       PaymentDetail[]

  @@map("fee_types")
}

model FeeStructure {
  id             String       @id @default(cuid())
  academicYearId String
  classId        String
  feeTypeId      String
  amount         Float
  term1Amount    Float        @default(0)
  term2Amount    Float        @default(0)
  term3Amount    Float        @default(0)
  isActive       Boolean      @default(true)
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  academicYear   AcademicYear @relation(fields: [academicYearId], references: [id])
  class          Class        @relation(fields: [classId], references: [id])
  feeType        FeeType      @relation(fields: [feeTypeId], references: [id])

  @@map("fee_structure")
}

model AnnualFeesStructure {
  id                String       @id @default(cuid())
  academicYearId    String
  classId           String
  feeTypeId         String
  feesAmountTerm1   Float        @default(0)
  feesAmountTerm2   Float        @default(0)
  feesAmountTerm3   Float        @default(0)
  feesAmountTerm1b2 Float        @default(0)
  feesAmountTerm2b2 Float        @default(0)
  feesAmountTerm3b2 Float        @default(0)
  createdAt         DateTime     @default(now())
  academicYear      AcademicYear @relation(fields: [academicYearId], references: [id])
  class             Class        @relation(fields: [classId], references: [id])
  feeType           FeeType      @relation(fields: [feeTypeId], references: [id])

  @@map("annual_fees_structure")
}

model PaymentMethod {
  id          String       @id @default(cuid())
  name        String
  description String?
  isActive    Boolean      @default(true)
  createdAt   DateTime     @default(now())
  feePayments FeePayment[]

  @@map("payment_methods")
}

model FeePayment {
  id              String          @id @default(cuid())
  studentId       String
  academicYearId  String
  termId          String?
  paymentDate     DateTime
  receiptNumber   String          @unique
  amountPaid      Float
  paymentMethodId String?
  referenceNumber String?
  notes           String?
  createdBy       String?
  createdAt       DateTime        @default(now())
  academicYear    AcademicYear    @relation(fields: [academicYearId], references: [id])
  paymentMethod   PaymentMethod?  @relation(fields: [paymentMethodId], references: [id])
  student         Student         @relation(fields: [studentId], references: [id])
  term            Term?           @relation(fields: [termId], references: [id])
  paymentDetails  PaymentDetail[]
  photoReceipts   PhotoReceipt[]
  receipts        Receipt[]

  @@map("fee_payments")
}

model PaymentDetail {
  id        String     @id @default(cuid())
  paymentId String
  feeTypeId String
  amount    Float
  createdAt DateTime   @default(now())
  feeType   FeeType    @relation(fields: [feeTypeId], references: [id])
  payment   FeePayment @relation(fields: [paymentId], references: [id])

  @@map("payment_details")
}

model Receipt {
  id            String     @id @default(cuid())
  paymentId     String
  receiptNumber String     @unique
  totalAmount   Float
  paymentMethod String
  schoolId      String?
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  payment       FeePayment @relation(fields: [paymentId], references: [id])
  school        School?    @relation(fields: [schoolId], references: [id])

  @@map("receipts")
}

model PhotoReceipt {
  id            String     @id @default(cuid())
  paymentId     String
  receiptNumber String
  photoPath     String
  notes         String?
  amount        Float
  paymentMethod String
  captureDate   DateTime
  uploadedAt    DateTime   @default(now())
  payment       FeePayment @relation(fields: [paymentId], references: [id])

  @@map("photo_receipts")
}

model FeeBalance {
  id             String       @id @default(cuid())
  studentId      String
  academicYearId String
  termId         String?
  feeTypeId      String
  amountCharged  Float        @default(0)
  amountPaid     Float        @default(0)
  balance        Float        @default(0)
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  academicYear   AcademicYear @relation(fields: [academicYearId], references: [id])
  feeType        FeeType      @relation(fields: [feeTypeId], references: [id])
  student        Student      @relation(fields: [studentId], references: [id])
  term           Term?        @relation(fields: [termId], references: [id])

  @@map("fee_balances")
}

model OtherCharge {
  id                String       @id @default(cuid())
  studentId         String
  academicYearId    String
  chargeType        String
  description       String?
  admissionFeeTerm1 Float        @default(0)
  admissionFeeTerm2 Float        @default(0)
  admissionFeeTerm3 Float        @default(0)
  amount            Float
  chargeDate        DateTime
  isPaid            Boolean      @default(false)
  createdAt         DateTime     @default(now())
  academicYear      AcademicYear @relation(fields: [academicYearId], references: [id])
  student           Student      @relation(fields: [studentId], references: [id])

  @@map("other_charges")
}

model Employee {
  id             String    @id @default(cuid())
  employeeNumber String    @unique
  firstName      String
  lastName       String
  middleName     String?
  department     String?
  position       String?
  email          String?
  phone          String?
  hireDate       DateTime?
  isActive       Boolean   @default(true)
  createdAt      DateTime  @default(now())
  payroll        Payroll[]

  @@map("employees")
}

model Payroll {
  id                      String   @id @default(cuid())
  employeeId              String
  month                   Int
  year                    Int
  grossConsolidatedSalary Float    @default(0)
  overtimePay             Float    @default(0)
  travellingAllowance     Float    @default(0)
  leavePay                Float    @default(0)
  otherEarnings           Float    @default(0)
  nonTaxableEarnings      Float    @default(0)
  bonusPaid               Float    @default(0)
  lessAbsence             Float    @default(0)
  grossPay                Float    @default(0)
  paye                    Float    @default(0)
  netPay                  Float    @default(0)
  createdAt               DateTime @default(now())
  employee                Employee @relation(fields: [employeeId], references: [id])

  @@map("payroll")
}

model User {
  id              String           @id @default(cuid())
  email           String           @unique
  passwordHash    String
  firstName       String
  lastName        String
  role            UserRole
  isActive        Boolean          @default(true)
  lastLogin       DateTime?
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  auditLogs       AuditLog[]
  reports         Report[]
  userPermissions UserPermission[]

  @@map("users")
}

model UserPermission {
  id         String   @id @default(cuid())
  userId     String
  permission String
  granted    Boolean  @default(true)
  createdAt  DateTime @default(now())
  user       User     @relation(fields: [userId], references: [id])

  @@map("user_permissions")
}

model AuditLog {
  id        String   @id @default(cuid())
  userId    String?
  action    String
  tableName String?
  recordId  String?
  oldValues Json?
  newValues Json?
  ipAddress String?
  userAgent String?
  createdAt DateTime @default(now())
  user      User?    @relation(fields: [userId], references: [id])

  @@map("audit_log")
}

model Report {
  id          String   @id @default(cuid())
  name        String
  description String?
  reportType  String
  parameters  Json?
  createdBy   String?
  createdAt   DateTime @default(now())
  user        User?    @relation(fields: [createdBy], references: [id])

  @@map("reports")
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

enum StudentStatus {
  ACTIVE
  GRADUATED
  TRANSFERRED
  SUSPENDED
}

enum FeeFrequency {
  ONCE
  TERM
  MONTH
  YEAR
}

enum UserRole {
  ADMIN
  TEACHER
  ACCOUNTANT
  PARENT
}
